{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "import React": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "ir",
    "body": ["import React from 'react'$0"],
    "description": "import useState"
  },
  "import useState": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "iust",
    "body": ["import { useState } from 'react'$0"],
    "description": "import useState"
  },
  "import React and useState": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "iru",
    "body": ["import React, { useState } from 'react'$0"],
    "description": "import React and useState"
  },
  "import React and useState and useEffect": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "iruu",
    "body": ["import React, { useState, useEffect } from \"react\"$0"],
    "description": "import React and useState and useEffect"
  },
  "import useState and useEffect": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "iuu",
    "body": ["import { useState, useEffect } from \"react\"$0"],
    "description": "import useState and useEffect"
  },
  "import without braces": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "imp",
    "body": ["import ${1} from '$0'"],
    "description": "import without braces"
  },
  "import comonents": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "imc",
    "body": ["import ${1:Component} from '$0${1:Component}'"],
    "description": "import without braces"
  },
  "Create Hook with useState": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "ho",
    "body": ["const [${1:hook}, set$0${1:hook}] = useState(${2:state})"],
    "description": "React Hook"
  },
  "const props": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "pr",
    "body": ["const { $0 } = props"],
    "description": "const {  } = props"
  },
  "to component props": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "prc",
    "body": ["${1} = { ${1} }$0"],
    "description": "const {  } = props"
  },
  "Function Component Template": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "fc",
    "body": [
      "function ${1:ComponentName}(${2}) {",
      "  $0",
      "",
      "  return (",
      "    <${3:htmlTag}>",
      "      ${4:< />}",
      "    </${3:htmlTag}>",
      "  )",
      "}",
      "",
      "export default ${1:ComponentName}"
    ],
    "description": "Function Component Template"
  },
  "Class Component Template": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "cc",
    "body": [
      "class ${1:ComponentName} extends React.Component {",
      "  constructor(${2}) {",
      "    super(${2})",
      "    this.state = {",
      "      ${3}",
      "    }",
      "    console.log('constructor')",
      "  }",
      "",
      "  render() {",
      "    console.log('render')",
      "    return (",
      "      <>",
      "        $0",
      "      </>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:ComponentName}"
    ],
    "description": "Class Component Template"
  },
  "New App Importing One Component": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "nac",
    "body": [
      "import ${1:ComponentName} from './components/${1:ComponentName}'",
      "",
      "function App() {",
      "  return (",
      "    <>",
      "      <${1:ComponentName} />$0",
      "    </>",
      "  )",
      "}",
      "",
      "export default App"
    ],
    "description": "New App Importing One Component"
  },
  "onClick for React": {
    "prefix": "oc",
    "body": ["onClick={($0) => {$1}}$2"],
    "description": "onClick for React"
  },
  "btn onClick": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "boc",
    "body": [
      "<button onClick={() => {",
      "  $0",
      "}}>",
      "${1:text}",
      "</button>"
    ],
    "description": "btn onClick"
  },
  "JSX Element": {
    "scope": "javascript,typescript,javascriptreact, typescriptreact",
    "prefix": "ej",
    "body": ["<$0 />"],
    "description": "JSX Element"
  },

  "Prop of same name to pass": {
    "prefix": "psn",
    "body": ["${1:prop name}={${1:prop name}}$0"],
    "description": "Prop of same name to pass"
  },

  "Prop type validation": {
    "prefix": "pt",
    "body": [
      "import PropTypes from \"prop-types\";",
      "",
      "${1:Component}.propTypes = {",
      "  ${2:prop}: PropTypes.${3:prop type}.isRequired,",
      "};"
    ],
    "description": "Prop type validation"
  }
}
